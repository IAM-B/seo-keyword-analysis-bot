# Generated by Selenium IDE
import pytest
import time
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common import exceptions
import csv

# Load existing data from final.csv
with open("final.csv") as file:
    rows = csv.DictReader(file)
    already_scanned = {r["Keyword"] for r in rows}

# Load existing data from not_good.txt
with open("not_good.txt") as file:
    for word in file.readlines():
        already_scanned.add(word.strip())

# Class to test SEO functionality using allintitle queries
class TestSeoAllintitle:
  
    def setup_method(self, method):
        """Initialize Selenium driver at the beginning of each test."""
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        """Close Selenium driver at the end of each test."""
        self.driver.quit()

    def test_seo_allintitle(self):
        """Main test method for SEO allintitle functionality."""
        # Open Google search page
        self.driver.get("https://www.google.com/search?q=%20")
        self.driver.set_window_size(1050, 702)
        # Accept cookies
        self.bypass_accept_cookie()
        # Write new results to final.csv and not_good.txt
        self.write_new_csv()

    def bypass_accept_cookie(self):
        """Method to bypass and accept cookies."""
        try:
            self.driver.find_element(By.ID, "L2AGLb").click()
        except exceptions.NoSuchElementException:
            pass  # Continue if no acceptance needed

    def open_csv(self):
        """Open keywords.csv and return content."""
        with open("keywords.csv", 'r', encoding="utf-8") as f:
            rows = f.read().splitlines()
        return rows[1:]  # Exclude header row

    def get_keywords_and_monthly_average(self):
        """Get keywords and monthly search average from CSV."""
        for row in self.open_csv():
            values = row.split(",")
            keyword = values[0]
            if keyword in already_scanned:
                continue
            monthly_avg = int(values[2])
            if 100 <= monthly_avg <= 5000:
                yield keyword, monthly_avg

    def write_new_csv(self):
        """Write new results to final.csv and not_good.txt based on criteria."""
        for keyword, monthly_avg in self.get_keywords_and_monthly_average():
            total_search = int(self.get_result_for_keyword(keyword))
            if total_search < 5000:
                with open("final.csv", "a", newline="") as file:
                    writer = csv.writer(file)
                    writer.writerow([keyword, monthly_avg, total_search, total_search / monthly_avg])
            else:
                with open("not_good.txt", "a") as file:
                    file.write(f"{keyword}\n")

    def get_result_for_keyword(self, keyword):
        """Get search result count for a specific keyword."""
        self.clear_search_field()
        search_field = self.driver.find_element(By.NAME, "q")
        search_field.send_keys(f"allintitle: {keyword}")
        search_field.send_keys(Keys.ENTER)
        try:
            element = self.driver.find_element(By.ID, "result-stats")
            text = element.text
            pattern = r"(About )?([\d,]+) results"
            result = re.search(pattern, text)
            return int(result.group(2).replace(",", "")) if result else 0
        except exceptions.NoSuchElementException:
            print(f"No results found for: {keyword}")
            return 0

    def clear_search_field(self):
        """Clear the search field."""
        try:
            self.driver.find_element(By.CSS_SELECTOR, ".ExCKkf path").click()
        except exceptions.NoSuchElementException:
            pass
